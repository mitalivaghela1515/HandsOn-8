Q.1 => Leverage your implementation of quicksort to implement the ith order statistic. Demonstrate it's working via an example. Upload your code to github.


First, Let's start by implementing the quicksort algorithm itself:


def partition(arr, low, high):
    pivot = arr[high]
    i = low - 1
    for j in range(low, high):
        if arr[j] <= pivot:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]
    arr[i + 1], arr[high] = arr[high], arr[i + 1]
    return i + 1

def quicksort(arr, low, high):
    if low < high:
        pi = partition(arr, low, high)
        quicksort(arr, low, pi - 1)
        quicksort(arr, pi + 1, high)

def quickselect(arr, low, high, i):
    if low == high:
        return arr[low]
    pivot_index = partition(arr, low, high)
    if i == pivot_index:
        return arr[i]
    elif i < pivot_index:
        return quickselect(arr, low, pivot_index - 1, i)
    else:
        return quickselect(arr, pivot_index + 1, high, i)

Now, let's demonstrate the working of the ith order statistic function using an example:


arr = [3, 1, 4, 2, 5]  # Example array
i = 2  # We want to find the 2nd smallest element
quicksort(arr, 0, len(arr) - 1)  # Sort the array using quicksort
ith_order_statistic = quickselect(arr, 0, len(arr) - 1, i - 1)  # Finding the ith order statistic
print(f"The {i}th smallest element in the array is: {ith_order_statistic}")


In this example, we're finding the 2nd smallest element in the array [3, 1, 4, 2, 5]. After sorting the array using quicksort, we find that the 2nd smallest element is 2, which matches the output of our ‘quickselect’ function.
